#################################################################################
dotplot_plotly <- function(enrichment_result, showCategory){
# set gene node size arguments ----------------------------------------
gene_node_size <- 15
node_size_scale <- c(min=10, max=40)
# create dotplot object -----------------------------------------
dp <-dotplot(enrichment_result, showCategory=showCategory)
# create df for plot -----------------------------------------
plotly_df <- dp$data %>%
mutate(Pathway = Description,
Description = str_wrap(Description, width = 30),
node_size = (Count - min(dp$data$Count)) / max(dp$data$Count) * node_size_scale["max"] + node_size_scale["min"]) %>%
arrange(desc(GeneRatio))
# set colorbar tick  -----------------------------------------
colorbar_tickvals <- seq(floor(min(-log10(dp$data["p.adjust"]))), ceiling(max(-log10(dp$data["p.adjust"]))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
p <- plot_ly(
x = plotly_df$GeneRatio, y = plotly_df$Description,
type = "scatter",
mode = "markers",
color = ~-log10(plotly_df$p.adjust),
colors = viridis_pal(option = "C", direction = 1)(3),
marker = list(
size = plotly_df$node_size,
alpha = 1,
line = list(width = 0)#,
),
hovertemplate = paste(plotly_df$Description, '\n',
'p.adjust:', signif(plotly_df$p.adjust, 3), '\n',
'num genes:', plotly_df$Count, '\n',
"gene ratio:", signif(plotly_df$GeneRatio, 2)),
showlegend=FALSE)
p <- p %>%
layout(autosize = TRUE,
margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
yaxis = list(categoryorder = "array",
categoryarray = rev(plotly_df$Descriptio)))%>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e")
return(p)
}
dotplot_plotly(enrichment_result, showCategory = 12)
#################################################################################
dotplot_plotly <- function(enrichment_result, showCategory){
# set gene node size arguments ----------------------------------------
gene_node_size <- 15
node_size_scale <- c(min=10, max=40)
# create dotplot object -----------------------------------------
dp <-dotplot(enrichment_result, showCategory=showCategory)
# create df for plot -----------------------------------------
plotly_df <- dp$data %>%
mutate(Pathway = Description,
Description = str_wrap(Description, width = 30),
node_size = (Count - min(dp$data$Count)) / max(dp$data$Count) * node_size_scale["max"] + node_size_scale["min"]) %>%
arrange(desc(GeneRatio))
# set colorbar tick  -----------------------------------------
colorbar_tickvals <- seq(floor(min(-log10(dp$data["p.adjust"]))), ceiling(max(-log10(dp$data["p.adjust"]))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
p <- plot_ly(
x = plotly_df$GeneRatio, y = plotly_df$Description,
type = "scatter",
mode = "markers",
color = ~-log10(plotly_df$p.adjust),
colors = viridis_pal(option = "C", direction = 1)(3),
marker = list(
size = plotly_df$node_size,
alpha = 1,
line = list(width = 0)#,
),
hovertemplate = paste(plotly_df$Description, '\n',
'p.adjust:', signif(plotly_df$p.adjust, 3), '\n',
'num genes:', plotly_df$Count, '\n',
"gene ratio:", signif(plotly_df$GeneRatio, 2)),
showlegend=FALSE) %>%
add_markers(alpha=1)
p <- p %>%
layout(autosize = TRUE,
margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
yaxis = list(categoryorder = "array",
categoryarray = rev(plotly_df$Descriptio)))%>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e")
return(p)
}
dotplot_plotly(enrichment_result, showCategory = 12)
barplot_plotly <- function(enrichment_result, showCategory){
# create barplot object -----------------------------------------
bp <-barplot(enrichment_result, showCategory=showCategory)
# create df for plot -----------------------------------------
plotly_df <- bp$data %>%
mutate(Pathway = Description,
Description = str_wrap(Description, width = 30),
) %>%
arrange(p.adjust)
# set colorbar tick  -----------------------------------------
colorbar_tickvals <- seq(floor(min(-log10(bp$data["p.adjust"]))), ceiling(max(-log10(bp$data["p.adjust"]))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
# plot  -----------------------------------------
p <- plot_ly(
x = plotly_df$Count, y = plotly_df$Description,
type = "bar",
color = ~-log10(plotly_df$p.adjust),
colors = viridis_pal(option = "C", direction = 1)(3),
marker = list(
size = plotly_df$node_size,
alpha = 1,
line = list(width = 0)
),
hovertemplate = paste(plotly_df$Description, '\n',
'p.adjust:', signif(plotly_df$p.adjust, 3), '\n',
'num genes:', plotly_df$Count, '\n',
"gene ratio:", signif(plotly_df$GeneRatio, 2)),
showlegend=FALSE)
p <- p %>%
layout(autosize = TRUE,
margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
yaxis = list(categoryorder = "array",
categoryarray = rev(plotly_df$Descriptio)))%>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e")
return(p)
}
barplot_plotly(enrichment_result, showCategory)
barplot_plotly(enrichment_result, showCategory = 12)
runApp()
emap_plotly <- function(enrichment_result, showCategory = 5, line_scale = 1, color="p.adjust"){
n <- update_n(enrichment_result, showCategory)
geneSets <- geneInCategory(enrichment_result)
y <- as.data.frame(enrichment_result)
if (is.numeric(n)) {
y <- y[1:n,]
} else {
y <- y[match(n, y$Description),]
n <- length(n)
}
if (n == 0) {
stop("no enriched term found...")
}
g <- emap_graph_build(y=y,geneSets=geneSets,color=color, line_scale=line_scale)
node_coordinates <- layout.circle(g)
label <- names(V(g))
edge_list <- as.data.frame(get.edgelist(g))
node2index <- c(1:length(V(g)))
names(node2index) <- names(V(g))
X_node <- node_coordinates[,1]
Y_node <- node_coordinates[,2]
edge_df <- tibble(
x = X_node[node2index[as.character(edge_list$V1)]],
xend = X_node[node2index[as.character(edge_list$V2)]],
y = Y_node[node2index[as.character(edge_list$V1)]],
yend = Y_node[node2index[as.character(edge_list$V2)]],
width = E(g)$width
)
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
marker_size_scale = c(min = 10, max = 50)
marker_size = (V(g)$size - min(V(g)$size)) / (max(V(g)$size) - min(V(g)$size)) * (marker_size_scale["max"] - marker_size_scale["min"]) + marker_size_scale["min"]
# max minに合わせるのでなくてratioは保ってmaxを40に合わせる → この手法だと小さいものがあまりに小さくなってしまう
# marker_size = (V(g)$size / max(V(g)$size)) * marker_size_scale["max"]
colorbar_tickvals <- seq(floor(min(-log10(V(g)$color))), ceiling(max(-log10(V(g)$color))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
p <- plot_ly(x = ~X_node, y = ~Y_node,
type = "scatter",
mode = "markers",
color = ~-log10(V(g)$color),
colors = viridis_pal(option = "C", direction = -1)(3),
marker = list(
size = marker_size,
alpha = 1,
line = list(width = 0)#,
),
hovertemplate = paste(label, '\n',
'p.adjust:', signif(V(g)$color, 3), '\n',
'num genes:', V(g)$size),
showlegend=FALSE)%>%
add_segments_variable_width(x=edge_df$x,  xend=edge_df$xend,
y=edge_df$y, yend=edge_df$yend,
width = edge_df$width) %>%
add_markers(showlegend=FALSE) %>%
add_text(text = str_wrap(label, 30), textposition = "bottom",
textfont = list(size = 12, family = 'Helvetica') ) %>%
layout(
autosize = TRUE, margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
xaxis = list(range = c(min(X_node) - (max(X_node) - min(X_node)) * 0.25,
max(X_node) + (max(X_node) - min(X_node)) * 0.25),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE),
yaxis = list(range = c(min(Y_node) - (max(Y_node) - min(Y_node)) * 0.15,
max(Y_node) + (max(X_node) - min(X_node)) * 0.1),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE)
) %>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e"
)
return(p)
}
emap_plotly(kegg_enrichment_result, showCategory = 12, line_scale = 1)
emap_plotly <- function(enrichment_result, showCategory = 5, line_scale = 1, color="p.adjust"){
n <- update_n(enrichment_result, showCategory)
geneSets <- geneInCategory(enrichment_result)
y <- as.data.frame(enrichment_result)
if (is.numeric(n)) {
y <- y[1:n,]
} else {
y <- y[match(n, y$Description),]
n <- length(n)
}
if (n == 0) {
stop("no enriched term found...")
}
g <- emap_graph_build(y=y,geneSets=geneSets,color=color, line_scale=line_scale)
node_coordinates <- layout.circle(g)
label <- names(V(g))
edge_list <- as.data.frame(get.edgelist(g))
node2index <- c(1:length(V(g)))
names(node2index) <- names(V(g))
X_node <- node_coordinates[,1]
Y_node <- node_coordinates[,2]
edge_df <- tibble(
x = X_node[node2index[as.character(edge_list$V1)]],
xend = X_node[node2index[as.character(edge_list$V2)]],
y = Y_node[node2index[as.character(edge_list$V1)]],
yend = Y_node[node2index[as.character(edge_list$V2)]],
width = E(g)$width
)
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
marker_size_scale = c(min = 10, max = 50)
marker_size = (V(g)$size - min(V(g)$size)) / (max(V(g)$size) - min(V(g)$size)) * (marker_size_scale["max"] - marker_size_scale["min"]) + marker_size_scale["min"]
# max minに合わせるのでなくてratioは保ってmaxを40に合わせる → この手法だと小さいものがあまりに小さくなってしまう
# marker_size = (V(g)$size / max(V(g)$size)) * marker_size_scale["max"]
colorbar_tickvals <- seq(floor(min(-log10(V(g)$color))), ceiling(max(-log10(V(g)$color))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
p <- plot_ly(x = ~X_node, y = ~Y_node,
type = "scatter",
mode = "markers",
color = ~-log10(V(g)$color),
colors = viridis_pal(option = "C", direction = 1)(3),
marker = list(
size = marker_size,
alpha = 1,
line = list(width = 0)#,
),
hovertemplate = paste(label, '\n',
'p.adjust:', signif(V(g)$color, 3), '\n',
'num genes:', V(g)$size),
showlegend=FALSE)%>%
add_segments_variable_width(x=edge_df$x,  xend=edge_df$xend,
y=edge_df$y, yend=edge_df$yend,
width = edge_df$width) %>%
add_markers(showlegend=FALSE) %>%
add_text(text = str_wrap(label, 30), textposition = "bottom",
textfont = list(size = 12, family = 'Helvetica') ) %>%
layout(
autosize = TRUE, margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
xaxis = list(range = c(min(X_node) - (max(X_node) - min(X_node)) * 0.25,
max(X_node) + (max(X_node) - min(X_node)) * 0.25),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE),
yaxis = list(range = c(min(Y_node) - (max(Y_node) - min(Y_node)) * 0.15,
max(Y_node) + (max(X_node) - min(X_node)) * 0.1),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE)
) %>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e"
)
return(p)
}
emap_plotly(kegg_enrichment_result, showCategory = 12, line_scale = 1)
runApp()
marker_size
marker_size = (V(g)$size - min(V(g)$size)) / (max(V(g)$size) - min(V(g)$size)) * (marker_size_scale["max"] - marker_size_scale["min"]) + marker_size_scale["min"]
marker_size_scale = c(min = 10, max = 50)
marker_size_scale
rcpp_clip(marker_size_scale, 20, 50)
?pmin
pmin(marker_size_scale)
pmin(marker_size_scale, 20,)
pmin(marker_size_scale, 20)
pmax(marker_size_scale, 20)
g <- emap_graph_build(y=y,geneSets=geneSets,color=color, line_scale=line_scale)
emap_plotly <- function(enrichment_result, showCategory = 5, line_scale = 1, color="p.adjust"){
n <- update_n(enrichment_result, showCategory)
geneSets <- geneInCategory(enrichment_result)
y <- as.data.frame(enrichment_result)
if (is.numeric(n)) {
y <- y[1:n,]
} else {
y <- y[match(n, y$Description),]
n <- length(n)
}
if (n == 0) {
stop("no enriched term found...")
}
g <- emap_graph_build(y=y,geneSets=geneSets,color=color, line_scale=line_scale)
node_coordinates <- layout.circle(g)
label <- names(V(g))
edge_list <- as.data.frame(get.edgelist(g))
node2index <- c(1:length(V(g)))
names(node2index) <- names(V(g))
X_node <- node_coordinates[,1]
Y_node <- node_coordinates[,2]
edge_df <- tibble(
x = X_node[node2index[as.character(edge_list$V1)]],
xend = X_node[node2index[as.character(edge_list$V2)]],
y = Y_node[node2index[as.character(edge_list$V1)]],
yend = Y_node[node2index[as.character(edge_list$V2)]],
width = E(g)$width
)
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
marker_size_scale = c(min = 10, max = 50)
#marker_size = (V(g)$size - min(V(g)$size)) / (max(V(g)$size) - min(V(g)$size)) * (marker_size_scale["max"] - marker_size_scale["min"]) + marker_size_scale["min"]
# max minに合わせるのでなくてratioは保ってmaxを50に合わせる → この手法だと小さいものがあまりに小さくなってしまう
# ratioは保ってmaxを50に合わせる、下は下限以下はすべてminにクリップする
marker_size = pmax((V(g)$size / max(V(g)$size)) * marker_size_scale["max"], marker_size_scale["min"])
colorbar_tickvals <- seq(floor(min(-log10(V(g)$color))), ceiling(max(-log10(V(g)$color))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
p <- plot_ly(x = ~X_node, y = ~Y_node,
type = "scatter",
mode = "markers",
color = ~-log10(V(g)$color),
colors = viridis_pal(option = "C", direction = 1)(3),
marker = list(
size = marker_size,
alpha = 1,
line = list(width = 0)#,
),
hovertemplate = paste(label, '\n',
'p.adjust:', signif(V(g)$color, 3), '\n',
'num genes:', V(g)$size),
showlegend=FALSE)%>%
add_segments_variable_width(x=edge_df$x,  xend=edge_df$xend,
y=edge_df$y, yend=edge_df$yend,
width = edge_df$width) %>%
add_markers(showlegend=FALSE) %>%
add_text(text = str_wrap(label, 30), textposition = "bottom",
textfont = list(size = 12, family = 'Helvetica') ) %>%
layout(
autosize = TRUE, margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
xaxis = list(range = c(min(X_node) - (max(X_node) - min(X_node)) * 0.25,
max(X_node) + (max(X_node) - min(X_node)) * 0.25),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE),
yaxis = list(range = c(min(Y_node) - (max(Y_node) - min(Y_node)) * 0.15,
max(Y_node) + (max(X_node) - min(X_node)) * 0.1),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE)
) %>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e"
)
return(p)
}
emap_plotly(kegg_enrichment_result, showCategory = 12, line_scale = 1)
emap_plotly(reactome_enrichment_result, showCategory = 12, line_scale = 1)
emap_plotly <- function(enrichment_result, showCategory = 5, line_scale = 1, color="p.adjust"){
n <- update_n(enrichment_result, showCategory)
geneSets <- geneInCategory(enrichment_result)
y <- as.data.frame(enrichment_result)
if (is.numeric(n)) {
y <- y[1:n,]
} else {
y <- y[match(n, y$Description),]
n <- length(n)
}
if (n == 0) {
stop("no enriched term found...")
}
g <- emap_graph_build(y=y,geneSets=geneSets,color=color, line_scale=line_scale)
node_coordinates <- layout.circle(g)
label <- names(V(g))
edge_list <- as.data.frame(get.edgelist(g))
node2index <- c(1:length(V(g)))
names(node2index) <- names(V(g))
X_node <- node_coordinates[,1]
Y_node <- node_coordinates[,2]
edge_df <- tibble(
x = X_node[node2index[as.character(edge_list$V1)]],
xend = X_node[node2index[as.character(edge_list$V2)]],
y = Y_node[node2index[as.character(edge_list$V1)]],
yend = Y_node[node2index[as.character(edge_list$V2)]],
width = E(g)$width
)
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
marker_size_scale = c(min = 15, max = 50)
#marker_size = (V(g)$size - min(V(g)$size)) / (max(V(g)$size) - min(V(g)$size)) * (marker_size_scale["max"] - marker_size_scale["min"]) + marker_size_scale["min"]
# max minに合わせるのでなくてratioは保ってmaxを50に合わせる → この手法だと小さいものがあまりに小さくなってしまう
# ratioは保ってmaxを50に合わせる、下は下限以下はすべてminにクリップする
marker_size = pmax((V(g)$size / max(V(g)$size)) * marker_size_scale["max"], marker_size_scale["min"])
colorbar_tickvals <- seq(floor(min(-log10(V(g)$color))), ceiling(max(-log10(V(g)$color))),  length=6)
colorbar_ticktext <- signif(10^(-colorbar_tickvals), 2)
p <- plot_ly(x = ~X_node, y = ~Y_node,
type = "scatter",
mode = "markers",
color = ~-log10(V(g)$color),
colors = viridis_pal(option = "C", direction = 1)(3),
marker = list(
size = marker_size,
alpha = 1,
line = list(width = 0)#,
),
hovertemplate = paste(label, '\n',
'p.adjust:', signif(V(g)$color, 3), '\n',
'num genes:', V(g)$size),
showlegend=FALSE)%>%
add_segments_variable_width(x=edge_df$x,  xend=edge_df$xend,
y=edge_df$y, yend=edge_df$yend,
width = edge_df$width) %>%
add_markers(showlegend=FALSE) %>%
add_text(text = str_wrap(label, 30), textposition = "bottom",
textfont = list(size = 12, family = 'Helvetica') ) %>%
layout(
autosize = TRUE, margin = list(l = 0, r = 0, b = 0, t = 20, pad = 4),
xaxis = list(range = c(min(X_node) - (max(X_node) - min(X_node)) * 0.25,
max(X_node) + (max(X_node) - min(X_node)) * 0.25),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE),
yaxis = list(range = c(min(Y_node) - (max(Y_node) - min(Y_node)) * 0.15,
max(Y_node) + (max(X_node) - min(X_node)) * 0.1),
title = "", showgrid = FALSE,
showticklabels = FALSE, zeroline = FALSE)
) %>%
colorbar(title = "p.adjust",
len = 0.5,
tickmode = "array",
tickvals = colorbar_tickvals,
ticktext = colorbar_ticktext,
exponentformat="e"
)
return(p)
}
emap_plotly(reactome_enrichment_result, showCategory = 12, line_scale = 1)
runApp()
# create reactome_enrichment_result -----------------------------------
sample_data<-read.csv("sample_gene_data.csv")
#サンプルデータの中のEntrez_Gene_IDを抽出
gene_IDs<-sample_data$Entrez_Gene_ID
#KEGGエンリッチメント解析を実行
kegg_enrichment_result <- enrichGO(gene=gene_IDs,pvalueCutoff=0.05)
#KEGGエンリッチメント解析を実行
GO_enrichment_result <- enrichGO(gene=gene_IDs,pvalueCutoff=0.05)
#KEGGエンリッチメント解析を実行
GO_enrichment_result <- enrichGO(gene=gene_IDs,pvalueCutoff=0.05, OrgDb = org.Hs.eg.db,ont = "All")
GO_enrichment_result
#KEGGエンリッチメント解析を実行
GO_enrichment_result <- enrichGO(gene=gene_IDs,pvalueCutoff=0.05,
OrgDb = org.Hs.eg.db,
ont = "All")
GO_enrichment_result
?enrichGO
#KEGGエンリッチメント解析を実行
GO_enrichment_result <- enrichGO(gene=gene_IDs, pvalueCutoff=0.05, readable = TRUE,
OrgDb = org.Hs.eg.db,
ont = "MF")
GO_enrichment_result
showCategory
enrichment_result <- GO_enrichment_result
barplot_plotly(enrichment_result, showCategory = 8)
dotplot_plotly(enrichment_result, showCategory = 8)
cnetplot_plotly(enrichment_result, showCategory = 8)
cnet_plotly(enrichment_result, showCategory = 8)
emap_plotly(enrichment_result, showCategory = 8)
cnet_plotly(enrichment_result, showCategory = 3)
?enrichDO
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
kegg_enrichment_result
kegg_enrichment_result %>% as.data.frame()
runApp()
runApp()
runApp()
kegg_enrichment_result %>% as.data.frame()
kegg_enrichment_result %>% as.data.frame() %>% mutate(pvalue = pvalue %>% signif(3))
runApp()
runApp()
library(pathview)
gene.id <- c("2819", "2820", "8611", "100137049")
path.id <- "00564"
pv <- pathview(gene.data = gene.id, pathway.id = path.id, species = "hsa")
pv
pv$plot.data.cpd
install.packages('devtools')
library(devtools)
library(devtools)
